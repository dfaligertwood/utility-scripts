#!/usr/bin/env python
from pandocfilters import RawInline, RawBlock, walk, stringify, toJSONFilter, Note, Para

power_symbol = '~'
string_keys = ['Str', 'Code', 'Math', 'LineBreak', 'Space', 'RawInline']
other_keys = ( ['Plain', 'Para', 'CodeBlock', 'RawBlock', 'BlockQuote',
                'OrderedList', 'BulletList', 'DefinitionList', 'Header',
                'HorizontalRule', 'Table', 'Div', 'Null', 'Emph', 'Strong',
                'Strikeout', 'Superscript', 'Subscript', 'SmallCaps', 'Quoted',
                'Cite', 'Link', 'Image', 'Note', 'Span'] )

"""
Does annotation stuff. For use with marginnote.sty.
Pretty hacky. Don't use once pandoc implements a proper
method for filtering notes.
"""

class WalkFilter(object):
    def __init__(self):
        self.powersym = True
        self.powersym_space = True
    def filter(self, key, val, fmt, meta):
        if key == 'Para':
            return walk(val, self.filter, "", {})
        elif self.powersym and val == power_symbol:
            self.powersym = False
            return []
        elif self.powersym_space and key == 'Space':
            self.powersym_space = False
            return []
    def html_filter(self, key, val, fmt, meta):
        if key == 'Para':
            return Para(walk(val, self.html_filter, "", {}))
        elif self.powersym and val == power_symbol:
            self.powersym = False
            return []
        elif self.powersym_space and key == 'Space':
            self.powersym_space = False
            return []
        
def latexBlock(s):
    return RawBlock('latex', s)

def latexInline(s):
    return RawInline('latex', s)

def parse(key, val, fmt, meta):
    if fmt == 'latex' and key == 'Note':
        contents = stringify(val)
        if contents[0] == power_symbol:
            walk_function = WalkFilter()
            return ([latexInline('\\reversemarginpar\\marginnote{')] +
                    walk(val, walk_function.filter, "", {}) +
                    [latexInline('}')])
    elif key == 'Note':
        contents = stringify(val)
        if contents[0] == power_symbol:
            walk_function = WalkFilter().html_filter
            return [Note(walk(val, walk_function, "", {}))]

if __name__ == "__main__":
  toJSONFilter(parse)
