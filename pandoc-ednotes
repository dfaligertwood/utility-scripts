#!/usr/bin/env python
from pandocfilters import RawInline, RawBlock, walk, stringify, toJSONFilter, Str, Null

power_symbol = '|'
seperator_symbol = ':'
string_keys = ['Str', 'Code', 'Math', 'LineBreak', 'Space', 'RawInline']
other_keys = ['Plain', 'Para', 'CodeBlock', 'RawBlock', 'BlockQuote', 'OrderedList', 'BulletList', 'DefinitionList', 'Header', 'HorizontalRule', 'Table', 'Div', 'Null', 'Emph', 'Strong', 'Strikeout', 'Superscript', 'Subscript', 'SmallCaps', 'Quoted', 'Cite', 'Link', 'Image', 'Note', 'Span']

"""
Does annotation stuff. For use with edNotes.sty.
"""

class WalkFilter(object):
    def __init__(self):
        self.divider = True
        self.divider_space = True
        self.powersym = True
        self.powersym_space = True
    def filter(self, key, val, fmt, meta):
        if key == 'Para':
            return walk(val, self.filter, "", {})
        if self.powersym and val == power_symbol:
            self.powersym = False
            return [Str("")]
        elif self.powersym_space and key == 'Space':
            self.powersym_space = False
            return [Str("")]
        elif self.divider and val == seperator_symbol:
            self.divider = False
            return [latexInline('}{')]
        elif self.divider_space and not self.divider and key == 'Space':
            self.divider_space = False
            return [Str("")]

def latexBlock(s):
    return RawBlock('latex', s)

def latexInline(s):
    return RawInline('latex', s)

def parse(key, val, fmt, meta):
    if True:
        if key == 'BlockQuote':
            return [latexBlock('\\begin{linenumbers}')] + val + [latexBlock('\\end{linenumbers}')]
        elif key == 'Note':
            contents = stringify(val).partition(seperator_symbol)
            if contents[0][0] == power_symbol:
                walk_function = WalkFilter()
                lemma = contents[0][1:].strip()
                return [latexInline('\\Anote{')] + walk(val, walk_function.filter, "", {}) + [latexInline('}')]
                #return [latexInline('\\Anote{' + lemma + '}{')] + val + [latexInline('}')]

if __name__ == "__main__":
  toJSONFilter(parse)
